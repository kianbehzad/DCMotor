// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_parsian_simurosot_worldmodel.proto

#include "messages_parsian_simurosot_worldmodel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MovingObject_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2D_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto;
class Vector2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector2D> _instance;
} _Vector2D_default_instance_;
class MovingObjectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MovingObject> _instance;
} _MovingObject_default_instance_;
class WorldModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WorldModel> _instance;
} _WorldModel_default_instance_;
static void InitDefaultsscc_info_MovingObject_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MovingObject_default_instance_;
    new (ptr) ::MovingObject();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MovingObject::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MovingObject_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MovingObject_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto}, {
      &scc_info_Vector2D_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.base,}};

static void InitDefaultsscc_info_Vector2D_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Vector2D_default_instance_;
    new (ptr) ::Vector2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Vector2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2D_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector2D_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto}, {}};

static void InitDefaultsscc_info_WorldModel_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WorldModel_default_instance_;
    new (ptr) ::WorldModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WorldModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_WorldModel_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_WorldModel_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto}, {
      &scc_info_MovingObject_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Vector2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Vector2D, x_),
  PROTOBUF_FIELD_OFFSET(::Vector2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MovingObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::MovingObject, id_),
  PROTOBUF_FIELD_OFFSET(::MovingObject, pos_),
  PROTOBUF_FIELD_OFFSET(::MovingObject, vel_),
  PROTOBUF_FIELD_OFFSET(::MovingObject, acc_),
  PROTOBUF_FIELD_OFFSET(::MovingObject, angulevelocity_),
  PROTOBUF_FIELD_OFFSET(::MovingObject, direction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WorldModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WorldModel, ball_),
  PROTOBUF_FIELD_OFFSET(::WorldModel, our_robots_),
  PROTOBUF_FIELD_OFFSET(::WorldModel, opp_robots_),
  PROTOBUF_FIELD_OFFSET(::WorldModel, blue_),
  PROTOBUF_FIELD_OFFSET(::WorldModel, mode_),
  PROTOBUF_FIELD_OFFSET(::WorldModel, gamestate_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Vector2D)},
  { 7, -1, sizeof(::MovingObject)},
  { 18, -1, sizeof(::WorldModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Vector2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MovingObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WorldModel_default_instance_),
};

const char descriptor_table_protodef_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+messages_parsian_simurosot_worldmodel."
  "proto\" \n\010Vector2D\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\""
  "\215\001\n\014MovingObject\022\n\n\002id\030\001 \001(\r\022\026\n\003pos\030\002 \001("
  "\0132\t.Vector2D\022\026\n\003vel\030\003 \001(\0132\t.Vector2D\022\026\n\003"
  "acc\030\004 \001(\0132\t.Vector2D\022\026\n\016anguleVelocity\030\005"
  " \001(\002\022\021\n\tdirection\030\006 \001(\002\"\252\001\n\nWorldModel\022\033"
  "\n\004ball\030\001 \001(\0132\r.MovingObject\022!\n\nour_robot"
  "s\030\002 \003(\0132\r.MovingObject\022!\n\nopp_robots\030\003 \003"
  "(\0132\r.MovingObject\022\014\n\004blue\030\004 \001(\010\022\014\n\004mode\030"
  "\005 \001(\t\022\035\n\tgameState\030\006 \001(\0162\n.GameState*\231\002\n"
  "\tGameState\022\n\n\006PlayOn\020\000\022\024\n\020FreeBall_LeftT"
  "op\020\001\022\024\n\020FreeBall_LeftBot\020\002\022\025\n\021FreeBall_R"
  "ightTop\020\003\022\025\n\021FreeBall_RightBot\020\004\022\024\n\020Plac"
  "eKick_Yellow\020\005\022\022\n\016PlaceKick_Blue\020\006\022\026\n\022Pe"
  "naltyKick_Yellow\020\007\022\024\n\020PenaltyKick_Blue\020\010"
  "\022\023\n\017FreeKick_Yellow\020\t\022\021\n\rFreeKick_Blue\020\n"
  "\022\023\n\017GoalKick_Yellow\020\013\022\021\n\rGoalKick_Blue\020\014"
  "b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto_sccs[3] = {
  &scc_info_MovingObject_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.base,
  &scc_info_Vector2D_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.base,
  &scc_info_WorldModel_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto_once;
static bool descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto = {
  &descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto_initialized, descriptor_table_protodef_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto, "messages_parsian_simurosot_worldmodel.proto", 688,
  &descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto_once, descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto_sccs, descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto::offsets,
  file_level_metadata_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto, 3, file_level_enum_descriptors_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto, file_level_service_descriptors_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto);
  return file_level_enum_descriptors_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto[0];
}
bool GameState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Vector2D::InitAsDefaultInstance() {
}
class Vector2D::_Internal {
 public:
};

Vector2D::Vector2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector2D)
}
Vector2D::Vector2D(const Vector2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:Vector2D)
}

void Vector2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2D::~Vector2D() {
  // @@protoc_insertion_point(destructor:Vector2D)
  SharedDtor();
}

void Vector2D::SharedDtor() {
}

void Vector2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector2D& Vector2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector2D_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.base);
  return *internal_default_instance();
}


void Vector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:Vector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

const char* Vector2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector2D)
  return target;
}

size_t Vector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Vector2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Vector2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Vector2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Vector2D)
    MergeFrom(*source);
  }
}

void Vector2D::MergeFrom(const Vector2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Vector2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vector2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Vector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2D::CopyFrom(const Vector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Vector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2D::IsInitialized() const {
  return true;
}

void Vector2D::InternalSwap(Vector2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(x_, other->x_);
  swap(y_, other->y_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MovingObject::InitAsDefaultInstance() {
  ::_MovingObject_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Vector2D*>(
      ::Vector2D::internal_default_instance());
  ::_MovingObject_default_instance_._instance.get_mutable()->vel_ = const_cast< ::Vector2D*>(
      ::Vector2D::internal_default_instance());
  ::_MovingObject_default_instance_._instance.get_mutable()->acc_ = const_cast< ::Vector2D*>(
      ::Vector2D::internal_default_instance());
}
class MovingObject::_Internal {
 public:
  static const ::Vector2D& pos(const MovingObject* msg);
  static const ::Vector2D& vel(const MovingObject* msg);
  static const ::Vector2D& acc(const MovingObject* msg);
};

const ::Vector2D&
MovingObject::_Internal::pos(const MovingObject* msg) {
  return *msg->pos_;
}
const ::Vector2D&
MovingObject::_Internal::vel(const MovingObject* msg) {
  return *msg->vel_;
}
const ::Vector2D&
MovingObject::_Internal::acc(const MovingObject* msg) {
  return *msg->acc_;
}
MovingObject::MovingObject()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MovingObject)
}
MovingObject::MovingObject(const MovingObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_pos()) {
    pos_ = new ::Vector2D(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_vel()) {
    vel_ = new ::Vector2D(*from.vel_);
  } else {
    vel_ = nullptr;
  }
  if (from._internal_has_acc()) {
    acc_ = new ::Vector2D(*from.acc_);
  } else {
    acc_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&direction_) -
    reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  // @@protoc_insertion_point(copy_constructor:MovingObject)
}

void MovingObject::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MovingObject_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.base);
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(direction_));
}

MovingObject::~MovingObject() {
  // @@protoc_insertion_point(destructor:MovingObject)
  SharedDtor();
}

void MovingObject::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete vel_;
  if (this != internal_default_instance()) delete acc_;
}

void MovingObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MovingObject& MovingObject::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MovingObject_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.base);
  return *internal_default_instance();
}


void MovingObject::Clear() {
// @@protoc_insertion_point(message_clear_start:MovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&id_)) + sizeof(direction_));
  _internal_metadata_.Clear();
}

const char* MovingObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vector2D pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vector2D vel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .Vector2D acc = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float anguleVelocity = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          angulevelocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float direction = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          direction_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MovingObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MovingObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // .Vector2D pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // .Vector2D vel = 3;
  if (this->has_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vel(this), target, stream);
  }

  // .Vector2D acc = 4;
  if (this->has_acc()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::acc(this), target, stream);
  }

  // float anguleVelocity = 5;
  if (!(this->angulevelocity() <= 0 && this->angulevelocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_angulevelocity(), target);
  }

  // float direction = 6;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_direction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MovingObject)
  return target;
}

size_t MovingObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MovingObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Vector2D pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .Vector2D vel = 3;
  if (this->has_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *vel_);
  }

  // .Vector2D acc = 4;
  if (this->has_acc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_);
  }

  // uint32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_id());
  }

  // float anguleVelocity = 5;
  if (!(this->angulevelocity() <= 0 && this->angulevelocity() >= 0)) {
    total_size += 1 + 4;
  }

  // float direction = 6;
  if (!(this->direction() <= 0 && this->direction() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MovingObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  const MovingObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MovingObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MovingObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MovingObject)
    MergeFrom(*source);
  }
}

void MovingObject::MergeFrom(const MovingObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MovingObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    _internal_mutable_pos()->::Vector2D::MergeFrom(from._internal_pos());
  }
  if (from.has_vel()) {
    _internal_mutable_vel()->::Vector2D::MergeFrom(from._internal_vel());
  }
  if (from.has_acc()) {
    _internal_mutable_acc()->::Vector2D::MergeFrom(from._internal_acc());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (!(from.angulevelocity() <= 0 && from.angulevelocity() >= 0)) {
    _internal_set_angulevelocity(from._internal_angulevelocity());
  }
  if (!(from.direction() <= 0 && from.direction() >= 0)) {
    _internal_set_direction(from._internal_direction());
  }
}

void MovingObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MovingObject::CopyFrom(const MovingObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MovingObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MovingObject::IsInitialized() const {
  return true;
}

void MovingObject::InternalSwap(MovingObject* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pos_, other->pos_);
  swap(vel_, other->vel_);
  swap(acc_, other->acc_);
  swap(id_, other->id_);
  swap(angulevelocity_, other->angulevelocity_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MovingObject::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WorldModel::InitAsDefaultInstance() {
  ::_WorldModel_default_instance_._instance.get_mutable()->ball_ = const_cast< ::MovingObject*>(
      ::MovingObject::internal_default_instance());
}
class WorldModel::_Internal {
 public:
  static const ::MovingObject& ball(const WorldModel* msg);
};

const ::MovingObject&
WorldModel::_Internal::ball(const WorldModel* msg) {
  return *msg->ball_;
}
WorldModel::WorldModel()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WorldModel)
}
WorldModel::WorldModel(const WorldModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      our_robots_(from.our_robots_),
      opp_robots_(from.opp_robots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mode().empty()) {
    mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  if (from._internal_has_ball()) {
    ball_ = new ::MovingObject(*from.ball_);
  } else {
    ball_ = nullptr;
  }
  ::memcpy(&blue_, &from.blue_,
    static_cast<size_t>(reinterpret_cast<char*>(&gamestate_) -
    reinterpret_cast<char*>(&blue_)) + sizeof(gamestate_));
  // @@protoc_insertion_point(copy_constructor:WorldModel)
}

void WorldModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WorldModel_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.base);
  mode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ball_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamestate_) -
      reinterpret_cast<char*>(&ball_)) + sizeof(gamestate_));
}

WorldModel::~WorldModel() {
  // @@protoc_insertion_point(destructor:WorldModel)
  SharedDtor();
}

void WorldModel::SharedDtor() {
  mode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ball_;
}

void WorldModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WorldModel& WorldModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WorldModel_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.base);
  return *internal_default_instance();
}


void WorldModel::Clear() {
// @@protoc_insertion_point(message_clear_start:WorldModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  our_robots_.Clear();
  opp_robots_.Clear();
  mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && ball_ != nullptr) {
    delete ball_;
  }
  ball_ = nullptr;
  ::memset(&blue_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gamestate_) -
      reinterpret_cast<char*>(&blue_)) + sizeof(gamestate_));
  _internal_metadata_.Clear();
}

const char* WorldModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .MovingObject ball = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .MovingObject our_robots = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_our_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .MovingObject opp_robots = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_opp_robots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // bool blue = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          blue_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_mode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WorldModel.mode"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .GameState gameState = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_gamestate(static_cast<::GameState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WorldModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WorldModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .MovingObject ball = 1;
  if (this->has_ball()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ball(this), target, stream);
  }

  // repeated .MovingObject our_robots = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_our_robots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_our_robots(i), target, stream);
  }

  // repeated .MovingObject opp_robots = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_opp_robots_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_opp_robots(i), target, stream);
  }

  // bool blue = 4;
  if (this->blue() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_blue(), target);
  }

  // string mode = 5;
  if (this->mode().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WorldModel.mode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_mode(), target);
  }

  // .GameState gameState = 6;
  if (this->gamestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_gamestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WorldModel)
  return target;
}

size_t WorldModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WorldModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MovingObject our_robots = 2;
  total_size += 1UL * this->_internal_our_robots_size();
  for (const auto& msg : this->our_robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .MovingObject opp_robots = 3;
  total_size += 1UL * this->_internal_opp_robots_size();
  for (const auto& msg : this->opp_robots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string mode = 5;
  if (this->mode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  // .MovingObject ball = 1;
  if (this->has_ball()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_);
  }

  // bool blue = 4;
  if (this->blue() != 0) {
    total_size += 1 + 1;
  }

  // .GameState gameState = 6;
  if (this->gamestate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gamestate());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WorldModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WorldModel)
  GOOGLE_DCHECK_NE(&from, this);
  const WorldModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WorldModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WorldModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WorldModel)
    MergeFrom(*source);
  }
}

void WorldModel::MergeFrom(const WorldModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WorldModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  our_robots_.MergeFrom(from.our_robots_);
  opp_robots_.MergeFrom(from.opp_robots_);
  if (from.mode().size() > 0) {

    mode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.mode_);
  }
  if (from.has_ball()) {
    _internal_mutable_ball()->::MovingObject::MergeFrom(from._internal_ball());
  }
  if (from.blue() != 0) {
    _internal_set_blue(from._internal_blue());
  }
  if (from.gamestate() != 0) {
    _internal_set_gamestate(from._internal_gamestate());
  }
}

void WorldModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WorldModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldModel::CopyFrom(const WorldModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WorldModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldModel::IsInitialized() const {
  return true;
}

void WorldModel::InternalSwap(WorldModel* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  our_robots_.InternalSwap(&other->our_robots_);
  opp_robots_.InternalSwap(&other->opp_robots_);
  mode_.Swap(&other->mode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ball_, other->ball_);
  swap(blue_, other->blue_);
  swap(gamestate_, other->gamestate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Vector2D* Arena::CreateMaybeMessage< ::Vector2D >(Arena* arena) {
  return Arena::CreateInternal< ::Vector2D >(arena);
}
template<> PROTOBUF_NOINLINE ::MovingObject* Arena::CreateMaybeMessage< ::MovingObject >(Arena* arena) {
  return Arena::CreateInternal< ::MovingObject >(arena);
}
template<> PROTOBUF_NOINLINE ::WorldModel* Arena::CreateMaybeMessage< ::WorldModel >(Arena* arena) {
  return Arena::CreateInternal< ::WorldModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
