// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_parsian_simurosot_detection.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_5fparsian_5fsimurosot_5fdetection_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_5fparsian_5fsimurosot_5fdetection_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_5fparsian_5fsimurosot_5fdetection_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_5fparsian_5fsimurosot_5fdetection_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5fparsian_5fsimurosot_5fdetection_2eproto;
class Frame;
class FrameDefaultTypeInternal;
extern FrameDefaultTypeInternal _Frame_default_instance_;
class RBall;
class RBallDefaultTypeInternal;
extern RBallDefaultTypeInternal _RBall_default_instance_;
class RRobot;
class RRobotDefaultTypeInternal;
extern RRobotDefaultTypeInternal _RRobot_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Frame* Arena::CreateMaybeMessage<::Frame>(Arena*);
template<> ::RBall* Arena::CreateMaybeMessage<::RBall>(Arena*);
template<> ::RRobot* Arena::CreateMaybeMessage<::RRobot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class RBall :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RBall) */ {
 public:
  RBall();
  virtual ~RBall();

  RBall(const RBall& from);
  RBall(RBall&& from) noexcept
    : RBall() {
    *this = ::std::move(from);
  }

  inline RBall& operator=(const RBall& from) {
    CopyFrom(from);
    return *this;
  }
  inline RBall& operator=(RBall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RBall* internal_default_instance() {
    return reinterpret_cast<const RBall*>(
               &_RBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RBall& a, RBall& b) {
    a.Swap(&b);
  }
  inline void Swap(RBall* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RBall* New() const final {
    return CreateMaybeMessage<RBall>(nullptr);
  }

  RBall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RBall>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RBall& from);
  void MergeFrom(const RBall& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RBall* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RBall";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fparsian_5fsimurosot_5fdetection_2eproto);
    return ::descriptor_table_messages_5fparsian_5fsimurosot_5fdetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:RBall)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_5fparsian_5fsimurosot_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class RRobot :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RRobot) */ {
 public:
  RRobot();
  virtual ~RRobot();

  RRobot(const RRobot& from);
  RRobot(RRobot&& from) noexcept
    : RRobot() {
    *this = ::std::move(from);
  }

  inline RRobot& operator=(const RRobot& from) {
    CopyFrom(from);
    return *this;
  }
  inline RRobot& operator=(RRobot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RRobot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RRobot* internal_default_instance() {
    return reinterpret_cast<const RRobot*>(
               &_RRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RRobot& a, RRobot& b) {
    a.Swap(&b);
  }
  inline void Swap(RRobot* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RRobot* New() const final {
    return CreateMaybeMessage<RRobot>(nullptr);
  }

  RRobot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RRobot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RRobot& from);
  void MergeFrom(const RRobot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RRobot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RRobot";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fparsian_5fsimurosot_5fdetection_2eproto);
    return ::descriptor_table_messages_5fparsian_5fsimurosot_5fdetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kAngFieldNumber = 4,
  };
  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float ang = 4;
  void clear_ang();
  float ang() const;
  void set_ang(float value);
  private:
  float _internal_ang() const;
  void _internal_set_ang(float value);
  public:

  // @@protoc_insertion_point(class_scope:RRobot)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float x_;
  float y_;
  float ang_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_5fparsian_5fsimurosot_5fdetection_2eproto;
};
// -------------------------------------------------------------------

class Frame :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Frame) */ {
 public:
  Frame();
  virtual ~Frame();

  Frame(const Frame& from);
  Frame(Frame&& from) noexcept
    : Frame() {
    *this = ::std::move(from);
  }

  inline Frame& operator=(const Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Frame& operator=(Frame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Frame* internal_default_instance() {
    return reinterpret_cast<const Frame*>(
               &_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Frame& a, Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Frame* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Frame* New() const final {
    return CreateMaybeMessage<Frame>(nullptr);
  }

  Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Frame& from);
  void MergeFrom(const Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Frame";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fparsian_5fsimurosot_5fdetection_2eproto);
    return ::descriptor_table_messages_5fparsian_5fsimurosot_5fdetection_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRobotsYellowFieldNumber = 3,
    kRobotsBlueFieldNumber = 4,
    kBallFieldNumber = 2,
    kFrameNumberFieldNumber = 1,
  };
  // repeated .RRobot robots_yellow = 3;
  int robots_yellow_size() const;
  private:
  int _internal_robots_yellow_size() const;
  public:
  void clear_robots_yellow();
  ::RRobot* mutable_robots_yellow(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RRobot >*
      mutable_robots_yellow();
  private:
  const ::RRobot& _internal_robots_yellow(int index) const;
  ::RRobot* _internal_add_robots_yellow();
  public:
  const ::RRobot& robots_yellow(int index) const;
  ::RRobot* add_robots_yellow();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RRobot >&
      robots_yellow() const;

  // repeated .RRobot robots_blue = 4;
  int robots_blue_size() const;
  private:
  int _internal_robots_blue_size() const;
  public:
  void clear_robots_blue();
  ::RRobot* mutable_robots_blue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RRobot >*
      mutable_robots_blue();
  private:
  const ::RRobot& _internal_robots_blue(int index) const;
  ::RRobot* _internal_add_robots_blue();
  public:
  const ::RRobot& robots_blue(int index) const;
  ::RRobot* add_robots_blue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RRobot >&
      robots_blue() const;

  // .RBall ball = 2;
  bool has_ball() const;
  private:
  bool _internal_has_ball() const;
  public:
  void clear_ball();
  const ::RBall& ball() const;
  ::RBall* release_ball();
  ::RBall* mutable_ball();
  void set_allocated_ball(::RBall* ball);
  private:
  const ::RBall& _internal_ball() const;
  ::RBall* _internal_mutable_ball();
  public:

  // uint32 frame_number = 1;
  void clear_frame_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_number() const;
  void set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_frame_number() const;
  void _internal_set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Frame)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RRobot > robots_yellow_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RRobot > robots_blue_;
  ::RBall* ball_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_5fparsian_5fsimurosot_5fdetection_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RBall

// float x = 1;
inline void RBall::clear_x() {
  x_ = 0;
}
inline float RBall::_internal_x() const {
  return x_;
}
inline float RBall::x() const {
  // @@protoc_insertion_point(field_get:RBall.x)
  return _internal_x();
}
inline void RBall::_internal_set_x(float value) {
  
  x_ = value;
}
inline void RBall::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RBall.x)
}

// float y = 2;
inline void RBall::clear_y() {
  y_ = 0;
}
inline float RBall::_internal_y() const {
  return y_;
}
inline float RBall::y() const {
  // @@protoc_insertion_point(field_get:RBall.y)
  return _internal_y();
}
inline void RBall::_internal_set_y(float value) {
  
  y_ = value;
}
inline void RBall::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RBall.y)
}

// -------------------------------------------------------------------

// RRobot

// uint32 id = 1;
inline void RRobot::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RRobot::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RRobot::id() const {
  // @@protoc_insertion_point(field_get:RRobot.id)
  return _internal_id();
}
inline void RRobot::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void RRobot::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:RRobot.id)
}

// float x = 2;
inline void RRobot::clear_x() {
  x_ = 0;
}
inline float RRobot::_internal_x() const {
  return x_;
}
inline float RRobot::x() const {
  // @@protoc_insertion_point(field_get:RRobot.x)
  return _internal_x();
}
inline void RRobot::_internal_set_x(float value) {
  
  x_ = value;
}
inline void RRobot::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:RRobot.x)
}

// float y = 3;
inline void RRobot::clear_y() {
  y_ = 0;
}
inline float RRobot::_internal_y() const {
  return y_;
}
inline float RRobot::y() const {
  // @@protoc_insertion_point(field_get:RRobot.y)
  return _internal_y();
}
inline void RRobot::_internal_set_y(float value) {
  
  y_ = value;
}
inline void RRobot::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:RRobot.y)
}

// float ang = 4;
inline void RRobot::clear_ang() {
  ang_ = 0;
}
inline float RRobot::_internal_ang() const {
  return ang_;
}
inline float RRobot::ang() const {
  // @@protoc_insertion_point(field_get:RRobot.ang)
  return _internal_ang();
}
inline void RRobot::_internal_set_ang(float value) {
  
  ang_ = value;
}
inline void RRobot::set_ang(float value) {
  _internal_set_ang(value);
  // @@protoc_insertion_point(field_set:RRobot.ang)
}

// -------------------------------------------------------------------

// Frame

// uint32 frame_number = 1;
inline void Frame::clear_frame_number() {
  frame_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Frame::_internal_frame_number() const {
  return frame_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Frame::frame_number() const {
  // @@protoc_insertion_point(field_get:Frame.frame_number)
  return _internal_frame_number();
}
inline void Frame::_internal_set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_number_ = value;
}
inline void Frame::set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_frame_number(value);
  // @@protoc_insertion_point(field_set:Frame.frame_number)
}

// .RBall ball = 2;
inline bool Frame::_internal_has_ball() const {
  return this != internal_default_instance() && ball_ != nullptr;
}
inline bool Frame::has_ball() const {
  return _internal_has_ball();
}
inline void Frame::clear_ball() {
  if (GetArenaNoVirtual() == nullptr && ball_ != nullptr) {
    delete ball_;
  }
  ball_ = nullptr;
}
inline const ::RBall& Frame::_internal_ball() const {
  const ::RBall* p = ball_;
  return p != nullptr ? *p : *reinterpret_cast<const ::RBall*>(
      &::_RBall_default_instance_);
}
inline const ::RBall& Frame::ball() const {
  // @@protoc_insertion_point(field_get:Frame.ball)
  return _internal_ball();
}
inline ::RBall* Frame::release_ball() {
  // @@protoc_insertion_point(field_release:Frame.ball)
  
  ::RBall* temp = ball_;
  ball_ = nullptr;
  return temp;
}
inline ::RBall* Frame::_internal_mutable_ball() {
  
  if (ball_ == nullptr) {
    auto* p = CreateMaybeMessage<::RBall>(GetArenaNoVirtual());
    ball_ = p;
  }
  return ball_;
}
inline ::RBall* Frame::mutable_ball() {
  // @@protoc_insertion_point(field_mutable:Frame.ball)
  return _internal_mutable_ball();
}
inline void Frame::set_allocated_ball(::RBall* ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ball_;
  }
  if (ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball, submessage_arena);
    }
    
  } else {
    
  }
  ball_ = ball;
  // @@protoc_insertion_point(field_set_allocated:Frame.ball)
}

// repeated .RRobot robots_yellow = 3;
inline int Frame::_internal_robots_yellow_size() const {
  return robots_yellow_.size();
}
inline int Frame::robots_yellow_size() const {
  return _internal_robots_yellow_size();
}
inline void Frame::clear_robots_yellow() {
  robots_yellow_.Clear();
}
inline ::RRobot* Frame::mutable_robots_yellow(int index) {
  // @@protoc_insertion_point(field_mutable:Frame.robots_yellow)
  return robots_yellow_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RRobot >*
Frame::mutable_robots_yellow() {
  // @@protoc_insertion_point(field_mutable_list:Frame.robots_yellow)
  return &robots_yellow_;
}
inline const ::RRobot& Frame::_internal_robots_yellow(int index) const {
  return robots_yellow_.Get(index);
}
inline const ::RRobot& Frame::robots_yellow(int index) const {
  // @@protoc_insertion_point(field_get:Frame.robots_yellow)
  return _internal_robots_yellow(index);
}
inline ::RRobot* Frame::_internal_add_robots_yellow() {
  return robots_yellow_.Add();
}
inline ::RRobot* Frame::add_robots_yellow() {
  // @@protoc_insertion_point(field_add:Frame.robots_yellow)
  return _internal_add_robots_yellow();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RRobot >&
Frame::robots_yellow() const {
  // @@protoc_insertion_point(field_list:Frame.robots_yellow)
  return robots_yellow_;
}

// repeated .RRobot robots_blue = 4;
inline int Frame::_internal_robots_blue_size() const {
  return robots_blue_.size();
}
inline int Frame::robots_blue_size() const {
  return _internal_robots_blue_size();
}
inline void Frame::clear_robots_blue() {
  robots_blue_.Clear();
}
inline ::RRobot* Frame::mutable_robots_blue(int index) {
  // @@protoc_insertion_point(field_mutable:Frame.robots_blue)
  return robots_blue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RRobot >*
Frame::mutable_robots_blue() {
  // @@protoc_insertion_point(field_mutable_list:Frame.robots_blue)
  return &robots_blue_;
}
inline const ::RRobot& Frame::_internal_robots_blue(int index) const {
  return robots_blue_.Get(index);
}
inline const ::RRobot& Frame::robots_blue(int index) const {
  // @@protoc_insertion_point(field_get:Frame.robots_blue)
  return _internal_robots_blue(index);
}
inline ::RRobot* Frame::_internal_add_robots_blue() {
  return robots_blue_.Add();
}
inline ::RRobot* Frame::add_robots_blue() {
  // @@protoc_insertion_point(field_add:Frame.robots_blue)
  return _internal_add_robots_blue();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RRobot >&
Frame::robots_blue() const {
  // @@protoc_insertion_point(field_list:Frame.robots_blue)
  return robots_blue_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_5fparsian_5fsimurosot_5fdetection_2eproto
