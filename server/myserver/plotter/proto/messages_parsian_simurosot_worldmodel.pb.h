// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_parsian_simurosot_worldmodel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto;
class MovingObject;
class MovingObjectDefaultTypeInternal;
extern MovingObjectDefaultTypeInternal _MovingObject_default_instance_;
class Vector2D;
class Vector2DDefaultTypeInternal;
extern Vector2DDefaultTypeInternal _Vector2D_default_instance_;
class WorldModel;
class WorldModelDefaultTypeInternal;
extern WorldModelDefaultTypeInternal _WorldModel_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MovingObject* Arena::CreateMaybeMessage<::MovingObject>(Arena*);
template<> ::Vector2D* Arena::CreateMaybeMessage<::Vector2D>(Arena*);
template<> ::WorldModel* Arena::CreateMaybeMessage<::WorldModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum GameState : int {
  PlayOn = 0,
  FreeBall_LeftTop = 1,
  FreeBall_LeftBot = 2,
  FreeBall_RightTop = 3,
  FreeBall_RightBot = 4,
  PlaceKick_Yellow = 5,
  PlaceKick_Blue = 6,
  PenaltyKick_Yellow = 7,
  PenaltyKick_Blue = 8,
  FreeKick_Yellow = 9,
  FreeKick_Blue = 10,
  GoalKick_Yellow = 11,
  GoalKick_Blue = 12,
  GameState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  GameState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool GameState_IsValid(int value);
constexpr GameState GameState_MIN = PlayOn;
constexpr GameState GameState_MAX = GoalKick_Blue;
constexpr int GameState_ARRAYSIZE = GameState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GameState_descriptor();
template<typename T>
inline const std::string& GameState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GameState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GameState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GameState_descriptor(), enum_t_value);
}
inline bool GameState_Parse(
    const std::string& name, GameState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GameState>(
    GameState_descriptor(), name, value);
}
// ===================================================================

class Vector2D :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Vector2D) */ {
 public:
  Vector2D();
  virtual ~Vector2D();

  Vector2D(const Vector2D& from);
  Vector2D(Vector2D&& from) noexcept
    : Vector2D() {
    *this = ::std::move(from);
  }

  inline Vector2D& operator=(const Vector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2D& operator=(Vector2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2D* internal_default_instance() {
    return reinterpret_cast<const Vector2D*>(
               &_Vector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector2D& a, Vector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2D* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2D* New() const final {
    return CreateMaybeMessage<Vector2D>(nullptr);
  }

  Vector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector2D& from);
  void MergeFrom(const Vector2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Vector2D";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto);
    return ::descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:Vector2D)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto;
};
// -------------------------------------------------------------------

class MovingObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MovingObject) */ {
 public:
  MovingObject();
  virtual ~MovingObject();

  MovingObject(const MovingObject& from);
  MovingObject(MovingObject&& from) noexcept
    : MovingObject() {
    *this = ::std::move(from);
  }

  inline MovingObject& operator=(const MovingObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovingObject& operator=(MovingObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovingObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MovingObject* internal_default_instance() {
    return reinterpret_cast<const MovingObject*>(
               &_MovingObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MovingObject& a, MovingObject& b) {
    a.Swap(&b);
  }
  inline void Swap(MovingObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MovingObject* New() const final {
    return CreateMaybeMessage<MovingObject>(nullptr);
  }

  MovingObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovingObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovingObject& from);
  void MergeFrom(const MovingObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovingObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MovingObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto);
    return ::descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosFieldNumber = 2,
    kVelFieldNumber = 3,
    kAccFieldNumber = 4,
    kIdFieldNumber = 1,
    kAnguleVelocityFieldNumber = 5,
    kDirectionFieldNumber = 6,
  };
  // .Vector2D pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::Vector2D& pos() const;
  ::Vector2D* release_pos();
  ::Vector2D* mutable_pos();
  void set_allocated_pos(::Vector2D* pos);
  private:
  const ::Vector2D& _internal_pos() const;
  ::Vector2D* _internal_mutable_pos();
  public:

  // .Vector2D vel = 3;
  bool has_vel() const;
  private:
  bool _internal_has_vel() const;
  public:
  void clear_vel();
  const ::Vector2D& vel() const;
  ::Vector2D* release_vel();
  ::Vector2D* mutable_vel();
  void set_allocated_vel(::Vector2D* vel);
  private:
  const ::Vector2D& _internal_vel() const;
  ::Vector2D* _internal_mutable_vel();
  public:

  // .Vector2D acc = 4;
  bool has_acc() const;
  private:
  bool _internal_has_acc() const;
  public:
  void clear_acc();
  const ::Vector2D& acc() const;
  ::Vector2D* release_acc();
  ::Vector2D* mutable_acc();
  void set_allocated_acc(::Vector2D* acc);
  private:
  const ::Vector2D& _internal_acc() const;
  ::Vector2D* _internal_mutable_acc();
  public:

  // uint32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float anguleVelocity = 5;
  void clear_angulevelocity();
  float angulevelocity() const;
  void set_angulevelocity(float value);
  private:
  float _internal_angulevelocity() const;
  void _internal_set_angulevelocity(float value);
  public:

  // float direction = 6;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // @@protoc_insertion_point(class_scope:MovingObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Vector2D* pos_;
  ::Vector2D* vel_;
  ::Vector2D* acc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 id_;
  float angulevelocity_;
  float direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto;
};
// -------------------------------------------------------------------

class WorldModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldModel) */ {
 public:
  WorldModel();
  virtual ~WorldModel();

  WorldModel(const WorldModel& from);
  WorldModel(WorldModel&& from) noexcept
    : WorldModel() {
    *this = ::std::move(from);
  }

  inline WorldModel& operator=(const WorldModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldModel& operator=(WorldModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldModel* internal_default_instance() {
    return reinterpret_cast<const WorldModel*>(
               &_WorldModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WorldModel& a, WorldModel& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldModel* New() const final {
    return CreateMaybeMessage<WorldModel>(nullptr);
  }

  WorldModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldModel& from);
  void MergeFrom(const WorldModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto);
    return ::descriptor_table_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOurRobotsFieldNumber = 2,
    kOppRobotsFieldNumber = 3,
    kModeFieldNumber = 5,
    kBallFieldNumber = 1,
    kBlueFieldNumber = 4,
    kGameStateFieldNumber = 6,
  };
  // repeated .MovingObject our_robots = 2;
  int our_robots_size() const;
  private:
  int _internal_our_robots_size() const;
  public:
  void clear_our_robots();
  ::MovingObject* mutable_our_robots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MovingObject >*
      mutable_our_robots();
  private:
  const ::MovingObject& _internal_our_robots(int index) const;
  ::MovingObject* _internal_add_our_robots();
  public:
  const ::MovingObject& our_robots(int index) const;
  ::MovingObject* add_our_robots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MovingObject >&
      our_robots() const;

  // repeated .MovingObject opp_robots = 3;
  int opp_robots_size() const;
  private:
  int _internal_opp_robots_size() const;
  public:
  void clear_opp_robots();
  ::MovingObject* mutable_opp_robots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MovingObject >*
      mutable_opp_robots();
  private:
  const ::MovingObject& _internal_opp_robots(int index) const;
  ::MovingObject* _internal_add_opp_robots();
  public:
  const ::MovingObject& opp_robots(int index) const;
  ::MovingObject* add_opp_robots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MovingObject >&
      opp_robots() const;

  // string mode = 5;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // .MovingObject ball = 1;
  bool has_ball() const;
  private:
  bool _internal_has_ball() const;
  public:
  void clear_ball();
  const ::MovingObject& ball() const;
  ::MovingObject* release_ball();
  ::MovingObject* mutable_ball();
  void set_allocated_ball(::MovingObject* ball);
  private:
  const ::MovingObject& _internal_ball() const;
  ::MovingObject* _internal_mutable_ball();
  public:

  // bool blue = 4;
  void clear_blue();
  bool blue() const;
  void set_blue(bool value);
  private:
  bool _internal_blue() const;
  void _internal_set_blue(bool value);
  public:

  // .GameState gameState = 6;
  void clear_gamestate();
  ::GameState gamestate() const;
  void set_gamestate(::GameState value);
  private:
  ::GameState _internal_gamestate() const;
  void _internal_set_gamestate(::GameState value);
  public:

  // @@protoc_insertion_point(class_scope:WorldModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MovingObject > our_robots_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MovingObject > opp_robots_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::MovingObject* ball_;
  bool blue_;
  int gamestate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2D

// float x = 1;
inline void Vector2D::clear_x() {
  x_ = 0;
}
inline float Vector2D::_internal_x() const {
  return x_;
}
inline float Vector2D::x() const {
  // @@protoc_insertion_point(field_get:Vector2D.x)
  return _internal_x();
}
inline void Vector2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Vector2D.x)
}

// float y = 2;
inline void Vector2D::clear_y() {
  y_ = 0;
}
inline float Vector2D::_internal_y() const {
  return y_;
}
inline float Vector2D::y() const {
  // @@protoc_insertion_point(field_get:Vector2D.y)
  return _internal_y();
}
inline void Vector2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Vector2D.y)
}

// -------------------------------------------------------------------

// MovingObject

// uint32 id = 1;
inline void MovingObject::clear_id() {
  id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MovingObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MovingObject::id() const {
  // @@protoc_insertion_point(field_get:MovingObject.id)
  return _internal_id();
}
inline void MovingObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  id_ = value;
}
inline void MovingObject::set_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:MovingObject.id)
}

// .Vector2D pos = 2;
inline bool MovingObject::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool MovingObject::has_pos() const {
  return _internal_has_pos();
}
inline void MovingObject::clear_pos() {
  if (GetArenaNoVirtual() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
inline const ::Vector2D& MovingObject::_internal_pos() const {
  const ::Vector2D* p = pos_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector2D*>(
      &::_Vector2D_default_instance_);
}
inline const ::Vector2D& MovingObject::pos() const {
  // @@protoc_insertion_point(field_get:MovingObject.pos)
  return _internal_pos();
}
inline ::Vector2D* MovingObject::release_pos() {
  // @@protoc_insertion_point(field_release:MovingObject.pos)
  
  ::Vector2D* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Vector2D* MovingObject::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2D>(GetArenaNoVirtual());
    pos_ = p;
  }
  return pos_;
}
inline ::Vector2D* MovingObject::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:MovingObject.pos)
  return _internal_mutable_pos();
}
inline void MovingObject::set_allocated_pos(::Vector2D* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:MovingObject.pos)
}

// .Vector2D vel = 3;
inline bool MovingObject::_internal_has_vel() const {
  return this != internal_default_instance() && vel_ != nullptr;
}
inline bool MovingObject::has_vel() const {
  return _internal_has_vel();
}
inline void MovingObject::clear_vel() {
  if (GetArenaNoVirtual() == nullptr && vel_ != nullptr) {
    delete vel_;
  }
  vel_ = nullptr;
}
inline const ::Vector2D& MovingObject::_internal_vel() const {
  const ::Vector2D* p = vel_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector2D*>(
      &::_Vector2D_default_instance_);
}
inline const ::Vector2D& MovingObject::vel() const {
  // @@protoc_insertion_point(field_get:MovingObject.vel)
  return _internal_vel();
}
inline ::Vector2D* MovingObject::release_vel() {
  // @@protoc_insertion_point(field_release:MovingObject.vel)
  
  ::Vector2D* temp = vel_;
  vel_ = nullptr;
  return temp;
}
inline ::Vector2D* MovingObject::_internal_mutable_vel() {
  
  if (vel_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2D>(GetArenaNoVirtual());
    vel_ = p;
  }
  return vel_;
}
inline ::Vector2D* MovingObject::mutable_vel() {
  // @@protoc_insertion_point(field_mutable:MovingObject.vel)
  return _internal_mutable_vel();
}
inline void MovingObject::set_allocated_vel(::Vector2D* vel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vel_;
  }
  if (vel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vel, submessage_arena);
    }
    
  } else {
    
  }
  vel_ = vel;
  // @@protoc_insertion_point(field_set_allocated:MovingObject.vel)
}

// .Vector2D acc = 4;
inline bool MovingObject::_internal_has_acc() const {
  return this != internal_default_instance() && acc_ != nullptr;
}
inline bool MovingObject::has_acc() const {
  return _internal_has_acc();
}
inline void MovingObject::clear_acc() {
  if (GetArenaNoVirtual() == nullptr && acc_ != nullptr) {
    delete acc_;
  }
  acc_ = nullptr;
}
inline const ::Vector2D& MovingObject::_internal_acc() const {
  const ::Vector2D* p = acc_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Vector2D*>(
      &::_Vector2D_default_instance_);
}
inline const ::Vector2D& MovingObject::acc() const {
  // @@protoc_insertion_point(field_get:MovingObject.acc)
  return _internal_acc();
}
inline ::Vector2D* MovingObject::release_acc() {
  // @@protoc_insertion_point(field_release:MovingObject.acc)
  
  ::Vector2D* temp = acc_;
  acc_ = nullptr;
  return temp;
}
inline ::Vector2D* MovingObject::_internal_mutable_acc() {
  
  if (acc_ == nullptr) {
    auto* p = CreateMaybeMessage<::Vector2D>(GetArenaNoVirtual());
    acc_ = p;
  }
  return acc_;
}
inline ::Vector2D* MovingObject::mutable_acc() {
  // @@protoc_insertion_point(field_mutable:MovingObject.acc)
  return _internal_mutable_acc();
}
inline void MovingObject::set_allocated_acc(::Vector2D* acc) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete acc_;
  }
  if (acc) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      acc = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acc, submessage_arena);
    }
    
  } else {
    
  }
  acc_ = acc;
  // @@protoc_insertion_point(field_set_allocated:MovingObject.acc)
}

// float anguleVelocity = 5;
inline void MovingObject::clear_angulevelocity() {
  angulevelocity_ = 0;
}
inline float MovingObject::_internal_angulevelocity() const {
  return angulevelocity_;
}
inline float MovingObject::angulevelocity() const {
  // @@protoc_insertion_point(field_get:MovingObject.anguleVelocity)
  return _internal_angulevelocity();
}
inline void MovingObject::_internal_set_angulevelocity(float value) {
  
  angulevelocity_ = value;
}
inline void MovingObject::set_angulevelocity(float value) {
  _internal_set_angulevelocity(value);
  // @@protoc_insertion_point(field_set:MovingObject.anguleVelocity)
}

// float direction = 6;
inline void MovingObject::clear_direction() {
  direction_ = 0;
}
inline float MovingObject::_internal_direction() const {
  return direction_;
}
inline float MovingObject::direction() const {
  // @@protoc_insertion_point(field_get:MovingObject.direction)
  return _internal_direction();
}
inline void MovingObject::_internal_set_direction(float value) {
  
  direction_ = value;
}
inline void MovingObject::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:MovingObject.direction)
}

// -------------------------------------------------------------------

// WorldModel

// .MovingObject ball = 1;
inline bool WorldModel::_internal_has_ball() const {
  return this != internal_default_instance() && ball_ != nullptr;
}
inline bool WorldModel::has_ball() const {
  return _internal_has_ball();
}
inline void WorldModel::clear_ball() {
  if (GetArenaNoVirtual() == nullptr && ball_ != nullptr) {
    delete ball_;
  }
  ball_ = nullptr;
}
inline const ::MovingObject& WorldModel::_internal_ball() const {
  const ::MovingObject* p = ball_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MovingObject*>(
      &::_MovingObject_default_instance_);
}
inline const ::MovingObject& WorldModel::ball() const {
  // @@protoc_insertion_point(field_get:WorldModel.ball)
  return _internal_ball();
}
inline ::MovingObject* WorldModel::release_ball() {
  // @@protoc_insertion_point(field_release:WorldModel.ball)
  
  ::MovingObject* temp = ball_;
  ball_ = nullptr;
  return temp;
}
inline ::MovingObject* WorldModel::_internal_mutable_ball() {
  
  if (ball_ == nullptr) {
    auto* p = CreateMaybeMessage<::MovingObject>(GetArenaNoVirtual());
    ball_ = p;
  }
  return ball_;
}
inline ::MovingObject* WorldModel::mutable_ball() {
  // @@protoc_insertion_point(field_mutable:WorldModel.ball)
  return _internal_mutable_ball();
}
inline void WorldModel::set_allocated_ball(::MovingObject* ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ball_;
  }
  if (ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball, submessage_arena);
    }
    
  } else {
    
  }
  ball_ = ball;
  // @@protoc_insertion_point(field_set_allocated:WorldModel.ball)
}

// repeated .MovingObject our_robots = 2;
inline int WorldModel::_internal_our_robots_size() const {
  return our_robots_.size();
}
inline int WorldModel::our_robots_size() const {
  return _internal_our_robots_size();
}
inline void WorldModel::clear_our_robots() {
  our_robots_.Clear();
}
inline ::MovingObject* WorldModel::mutable_our_robots(int index) {
  // @@protoc_insertion_point(field_mutable:WorldModel.our_robots)
  return our_robots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MovingObject >*
WorldModel::mutable_our_robots() {
  // @@protoc_insertion_point(field_mutable_list:WorldModel.our_robots)
  return &our_robots_;
}
inline const ::MovingObject& WorldModel::_internal_our_robots(int index) const {
  return our_robots_.Get(index);
}
inline const ::MovingObject& WorldModel::our_robots(int index) const {
  // @@protoc_insertion_point(field_get:WorldModel.our_robots)
  return _internal_our_robots(index);
}
inline ::MovingObject* WorldModel::_internal_add_our_robots() {
  return our_robots_.Add();
}
inline ::MovingObject* WorldModel::add_our_robots() {
  // @@protoc_insertion_point(field_add:WorldModel.our_robots)
  return _internal_add_our_robots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MovingObject >&
WorldModel::our_robots() const {
  // @@protoc_insertion_point(field_list:WorldModel.our_robots)
  return our_robots_;
}

// repeated .MovingObject opp_robots = 3;
inline int WorldModel::_internal_opp_robots_size() const {
  return opp_robots_.size();
}
inline int WorldModel::opp_robots_size() const {
  return _internal_opp_robots_size();
}
inline void WorldModel::clear_opp_robots() {
  opp_robots_.Clear();
}
inline ::MovingObject* WorldModel::mutable_opp_robots(int index) {
  // @@protoc_insertion_point(field_mutable:WorldModel.opp_robots)
  return opp_robots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MovingObject >*
WorldModel::mutable_opp_robots() {
  // @@protoc_insertion_point(field_mutable_list:WorldModel.opp_robots)
  return &opp_robots_;
}
inline const ::MovingObject& WorldModel::_internal_opp_robots(int index) const {
  return opp_robots_.Get(index);
}
inline const ::MovingObject& WorldModel::opp_robots(int index) const {
  // @@protoc_insertion_point(field_get:WorldModel.opp_robots)
  return _internal_opp_robots(index);
}
inline ::MovingObject* WorldModel::_internal_add_opp_robots() {
  return opp_robots_.Add();
}
inline ::MovingObject* WorldModel::add_opp_robots() {
  // @@protoc_insertion_point(field_add:WorldModel.opp_robots)
  return _internal_add_opp_robots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::MovingObject >&
WorldModel::opp_robots() const {
  // @@protoc_insertion_point(field_list:WorldModel.opp_robots)
  return opp_robots_;
}

// bool blue = 4;
inline void WorldModel::clear_blue() {
  blue_ = false;
}
inline bool WorldModel::_internal_blue() const {
  return blue_;
}
inline bool WorldModel::blue() const {
  // @@protoc_insertion_point(field_get:WorldModel.blue)
  return _internal_blue();
}
inline void WorldModel::_internal_set_blue(bool value) {
  
  blue_ = value;
}
inline void WorldModel::set_blue(bool value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:WorldModel.blue)
}

// string mode = 5;
inline void WorldModel::clear_mode() {
  mode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WorldModel::mode() const {
  // @@protoc_insertion_point(field_get:WorldModel.mode)
  return _internal_mode();
}
inline void WorldModel::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:WorldModel.mode)
}
inline std::string* WorldModel::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:WorldModel.mode)
  return _internal_mutable_mode();
}
inline const std::string& WorldModel::_internal_mode() const {
  return mode_.GetNoArena();
}
inline void WorldModel::_internal_set_mode(const std::string& value) {
  
  mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WorldModel::set_mode(std::string&& value) {
  
  mode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WorldModel.mode)
}
inline void WorldModel::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WorldModel.mode)
}
inline void WorldModel::set_mode(const char* value, size_t size) {
  
  mode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WorldModel.mode)
}
inline std::string* WorldModel::_internal_mutable_mode() {
  
  return mode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WorldModel::release_mode() {
  // @@protoc_insertion_point(field_release:WorldModel.mode)
  
  return mode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WorldModel::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode);
  // @@protoc_insertion_point(field_set_allocated:WorldModel.mode)
}

// .GameState gameState = 6;
inline void WorldModel::clear_gamestate() {
  gamestate_ = 0;
}
inline ::GameState WorldModel::_internal_gamestate() const {
  return static_cast< ::GameState >(gamestate_);
}
inline ::GameState WorldModel::gamestate() const {
  // @@protoc_insertion_point(field_get:WorldModel.gameState)
  return _internal_gamestate();
}
inline void WorldModel::_internal_set_gamestate(::GameState value) {
  
  gamestate_ = value;
}
inline void WorldModel::set_gamestate(::GameState value) {
  _internal_set_gamestate(value);
  // @@protoc_insertion_point(field_set:WorldModel.gameState)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::GameState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::GameState>() {
  return ::GameState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_5fparsian_5fsimurosot_5fworldmodel_2eproto
