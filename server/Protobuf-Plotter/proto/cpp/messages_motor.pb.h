// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_motor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_5fmotor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_5fmotor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_5fmotor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_5fmotor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_5fmotor_2eproto;
class MovingObject;
class MovingObjectDefaultTypeInternal;
extern MovingObjectDefaultTypeInternal _MovingObject_default_instance_;
class WorldModel;
class WorldModelDefaultTypeInternal;
extern WorldModelDefaultTypeInternal _WorldModel_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::MovingObject* Arena::CreateMaybeMessage<::MovingObject>(Arena*);
template<> ::WorldModel* Arena::CreateMaybeMessage<::WorldModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class MovingObject :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:MovingObject) */ {
 public:
  MovingObject();
  virtual ~MovingObject();

  MovingObject(const MovingObject& from);
  MovingObject(MovingObject&& from) noexcept
    : MovingObject() {
    *this = ::std::move(from);
  }

  inline MovingObject& operator=(const MovingObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline MovingObject& operator=(MovingObject&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MovingObject& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MovingObject* internal_default_instance() {
    return reinterpret_cast<const MovingObject*>(
               &_MovingObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MovingObject& a, MovingObject& b) {
    a.Swap(&b);
  }
  inline void Swap(MovingObject* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MovingObject* New() const final {
    return CreateMaybeMessage<MovingObject>(nullptr);
  }

  MovingObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MovingObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MovingObject& from);
  void MergeFrom(const MovingObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MovingObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "MovingObject";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fmotor_2eproto);
    return ::descriptor_table_messages_5fmotor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnguleVelocityFieldNumber = 5,
    kDirectionFieldNumber = 6,
  };
  // float anguleVelocity = 5;
  void clear_angulevelocity();
  float angulevelocity() const;
  void set_angulevelocity(float value);
  private:
  float _internal_angulevelocity() const;
  void _internal_set_angulevelocity(float value);
  public:

  // float direction = 6;
  void clear_direction();
  float direction() const;
  void set_direction(float value);
  private:
  float _internal_direction() const;
  void _internal_set_direction(float value);
  public:

  // @@protoc_insertion_point(class_scope:MovingObject)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  float angulevelocity_;
  float direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_5fmotor_2eproto;
};
// -------------------------------------------------------------------

class WorldModel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WorldModel) */ {
 public:
  WorldModel();
  virtual ~WorldModel();

  WorldModel(const WorldModel& from);
  WorldModel(WorldModel&& from) noexcept
    : WorldModel() {
    *this = ::std::move(from);
  }

  inline WorldModel& operator=(const WorldModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldModel& operator=(WorldModel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WorldModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorldModel* internal_default_instance() {
    return reinterpret_cast<const WorldModel*>(
               &_WorldModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(WorldModel& a, WorldModel& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldModel* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WorldModel* New() const final {
    return CreateMaybeMessage<WorldModel>(nullptr);
  }

  WorldModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WorldModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WorldModel& from);
  void MergeFrom(const WorldModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WorldModel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_5fmotor_2eproto);
    return ::descriptor_table_messages_5fmotor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMotorFieldNumber = 1,
  };
  // .MovingObject motor = 1;
  bool has_motor() const;
  private:
  bool _internal_has_motor() const;
  public:
  void clear_motor();
  const ::MovingObject& motor() const;
  ::MovingObject* release_motor();
  ::MovingObject* mutable_motor();
  void set_allocated_motor(::MovingObject* motor);
  private:
  const ::MovingObject& _internal_motor() const;
  ::MovingObject* _internal_mutable_motor();
  public:

  // @@protoc_insertion_point(class_scope:WorldModel)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::MovingObject* motor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_5fmotor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MovingObject

// float anguleVelocity = 5;
inline void MovingObject::clear_angulevelocity() {
  angulevelocity_ = 0;
}
inline float MovingObject::_internal_angulevelocity() const {
  return angulevelocity_;
}
inline float MovingObject::angulevelocity() const {
  // @@protoc_insertion_point(field_get:MovingObject.anguleVelocity)
  return _internal_angulevelocity();
}
inline void MovingObject::_internal_set_angulevelocity(float value) {
  
  angulevelocity_ = value;
}
inline void MovingObject::set_angulevelocity(float value) {
  _internal_set_angulevelocity(value);
  // @@protoc_insertion_point(field_set:MovingObject.anguleVelocity)
}

// float direction = 6;
inline void MovingObject::clear_direction() {
  direction_ = 0;
}
inline float MovingObject::_internal_direction() const {
  return direction_;
}
inline float MovingObject::direction() const {
  // @@protoc_insertion_point(field_get:MovingObject.direction)
  return _internal_direction();
}
inline void MovingObject::_internal_set_direction(float value) {
  
  direction_ = value;
}
inline void MovingObject::set_direction(float value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:MovingObject.direction)
}

// -------------------------------------------------------------------

// WorldModel

// .MovingObject motor = 1;
inline bool WorldModel::_internal_has_motor() const {
  return this != internal_default_instance() && motor_ != nullptr;
}
inline bool WorldModel::has_motor() const {
  return _internal_has_motor();
}
inline void WorldModel::clear_motor() {
  if (GetArenaNoVirtual() == nullptr && motor_ != nullptr) {
    delete motor_;
  }
  motor_ = nullptr;
}
inline const ::MovingObject& WorldModel::_internal_motor() const {
  const ::MovingObject* p = motor_;
  return p != nullptr ? *p : *reinterpret_cast<const ::MovingObject*>(
      &::_MovingObject_default_instance_);
}
inline const ::MovingObject& WorldModel::motor() const {
  // @@protoc_insertion_point(field_get:WorldModel.motor)
  return _internal_motor();
}
inline ::MovingObject* WorldModel::release_motor() {
  // @@protoc_insertion_point(field_release:WorldModel.motor)
  
  ::MovingObject* temp = motor_;
  motor_ = nullptr;
  return temp;
}
inline ::MovingObject* WorldModel::_internal_mutable_motor() {
  
  if (motor_ == nullptr) {
    auto* p = CreateMaybeMessage<::MovingObject>(GetArenaNoVirtual());
    motor_ = p;
  }
  return motor_;
}
inline ::MovingObject* WorldModel::mutable_motor() {
  // @@protoc_insertion_point(field_mutable:WorldModel.motor)
  return _internal_mutable_motor();
}
inline void WorldModel::set_allocated_motor(::MovingObject* motor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete motor_;
  }
  if (motor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      motor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, motor, submessage_arena);
    }
    
  } else {
    
  }
  motor_ = motor;
  // @@protoc_insertion_point(field_set_allocated:WorldModel.motor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_5fmotor_2eproto
